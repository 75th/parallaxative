{"version":3,"sources":["parallaxative.js"],"names":["ScrollAnimationValueSet","options","_this","this","_classCallCheck","defaultOptions","unit","valueFormat","substitutionString","startValue","endValue","resetValue","Object","assign","getOwnPropertyNames","forEach","name","scrollPosition","replace","toString","ScrollAnimation","animateTargets","scrollDetector","_this2","valueSets","arguments","length","undefined","properties","valueSetSeparator","removePropertiesOnReset","activeMediaQueryList","window","matchMedia","activateImmediately","listeners","ticking","activated","respond","addListener","_this3","animateTarget","classList","add","updateCSS","push","e","relativeScrollPosition","requestUpdate","addEventListener","cssValues","i","j","animateProperty","style","join","clampedRelativeScrollPosition","getCSSValue","setCSS","_this4","requestAnimationFrame","_this5","property","removeProperty","valueSet","init","listener","removeEventListener","reset","matches","activate","deactivate","ScrollDetector","scrollTarget","_this6","scrollIsVertical","offset","size","windowSize","scrollPos","scroll","rect","getBoundingClientRect","getVerticalScroll","top","height","innerHeight","pageYOffset","getHorizontalScroll","left","width","innerWidth","pageXOffset","zeroPoint","Math","min","max","scrollY","document","documentElement","scrollTop","body","scrollX","scrollLeft","ParallaxativeAnimationValueSet","_this7","scrollPixelsPerParallaxPixel","ParallaxativeAnimation","_possibleConstructorReturn","__proto__","getPrototypeOf","call","xDimensions","Size","yDimensions","dimensions","updateResizeProperties","_get","prototype","updateResizeCSS","scrollTranslate","scrollTargetSize","parallaxSize","scrollTargetRect","scrollDistance","valueSetsLength","animateTargetsLength","event","_this9","type"],"mappings":"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","file":"parallaxative.min.js","sourcesContent":["/**\n * Default option container for ScrollAnimation CSS values.\n * Making this a class might be overkill?\n */\nclass ScrollAnimationValueSet {\n\n\t/**\n\t * Constructor. All it does is merge supplied options with defaults.\n\t *\n\t * @param {obj} options\n\t *     Parameters for constructing CSS values to be put in a single CSS rule.\n\t *         {str} unit: CSS unit\n\t *         {str} valueFormat: String surrounding the CSS value, using a substitution string of your choice\n\t *         {str} substitutionString: As above\n\t *         {number} startValue: The value applied to the element the moment it is scrolled onto the screen\n\t *         {number} endValue: The value applied to the element the moment it is scrolled off the screen\n\t *         {number} resetValue: The value applied to the element when the animation is disabled\n\t *\n\t */\n\tconstructor(options) {\n\t\tvar defaultOptions = {\n\t\t\tunit: 'vh',\n\t\t\tvalueFormat: 'translateY(_)',\n\t\t\tsubstitutionString: '_',\n\t\t\tstartValue: 20,\n\t\t\tendValue: -20,\n\t\t\tresetValue: 0\n\t\t};\n\n\t\toptions = Object.assign({}, defaultOptions, options);\n\n\t\tObject.getOwnPropertyNames(options).forEach(name => {\n\t\t\tthis[name] = options[name];\n\t\t});\n\t}\n\n\tgetCSSValue(scrollPosition) {\n\t\treturn this.valueFormat.replace(this.substitutionString, ((this.endValue - this.startValue) * scrollPosition + this.startValue).toString() + this.unit)\n\t}\n}\n\n/**\n * Class to create and manage animations that are based on scrolling the window.\n */\nclass ScrollAnimation {\n\t/**\n\t * Constructor.\n\t *\n\t * @param {array<HTMLElement>} animateTargets\n\t *     The elements to animate based on the scroll position of the ScrollDetector\n\t *\n\t * @param {ScrollDetector} scrollDetector\n\t *\n\t * @param {object} options\n\t *     Other options that may be omitted to use default values\n\t *         {array<string>} properties: The JavaScript CSS property names to modify\n\t *         {string} valueSetSeparator: String on which to join the different CSS values for this rule\n\t *         {bool} removePropertiesOnReset: Whether to unset the CSS properties altogether on deactivation,\n\t *             instead of setting them to the resetValue\n\t *         {MediaQueryList} activeMediaQueryList: The MediaQueryList controlling activation and deactivation of this object\n\t *         {bool} activateImmediately: Whether to turn on the animation immediately upon construction.\n\t *             (Even if true, the animation will not activate if activeMediaQueryList.matches is false.)\n\t *\n\t * @param {array<ScrollAnimationValueSet>} valueSets\n\t *     Configuration for one or more values to be used in the single CSS rule\n\t *     this object manages.\n\t */\n\tconstructor(animateTargets, scrollDetector, options, valueSets = [ new ScrollAnimationValueSet() ]) {\n\t\tvar defaultOptions = {\n\t\t\tproperties: ['transform', 'msTransform'],\n\t\t\tvalueSetSeparator: ', ',\n\t\t\tremovePropertiesOnReset: true,\n\t\t\tactiveMediaQueryList: window.matchMedia('(min-width: 720px)'),\n\t\t\tactivateImmediately: true\n\t\t};\n\n\t\toptions = Object.assign({}, defaultOptions, options);\n\n\t\tObject.getOwnPropertyNames(options).forEach(name => {\n\t\t\tthis[name] = options[name];\n\t\t});\n\n\t\tthis.animateTargets = animateTargets;\n\t\tthis.scrollDetector = scrollDetector;\n\t\tthis.valueSets = valueSets;\n\t\tthis.listeners = [];\n\t\tthis.ticking = false;\n\t\tthis.activated = false;\n\n\t\tif(this.activateImmediately) {\n\t\t\tthis.respond();\n\t\t}\n\n\t\tthis.activeMediaQueryList.addListener(() => {\n\t\t\tthis.respond();\n\t\t});\n\t}\n\n\t/**\n\t * Set up and turn on the animation.\n\t *\n\t * @return {void}\n\t */\n\tinit() {\n\t\tthis.animateTargets.forEach(animateTarget => {\n\t\t\tanimateTarget.classList.add('scroll-animated');\n\t\t\tthis.updateCSS();\n\n\t\t\tthis.listeners.push((e) => {\n\t\t\t\tvar relativeScrollPosition = this.scrollDetector.relativeScrollPosition();\n\t\t\t\tif(relativeScrollPosition > -0.1 || relativeScrollPosition < 1.1) {\n\t\t\t\t\tthis.requestUpdate(e);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\twindow.addEventListener('scroll', this.listeners[this.listeners.length - 1]);\n\t\t\twindow.addEventListener('resize', this.listeners[this.listeners.length - 1]);\n\t\t});\n\t}\n\n\t/**\n\t * Actually modify the CSS of the animateTarget.\n\t *\n\t * @param {array<string>} cssValues - CSS strings to be joined by the valueSetSeparator\n\t */\n\tsetCSS(cssValues) {\n\t\tfor(var i = 0; i < this.animateTargets.length; i++) {\n\t\t\tvar animateTarget = this.animateTargets[i];\n\n\t\t\tfor(var j = 0; j < this.properties.length; j++) {\n\t\t\t\tvar animateProperty = this.properties[j];\n\t\t\t\tanimateTarget.style[animateProperty] = cssValues.join(this.valueSetSeparator);\n\t\t\t}\n\t\t}\n\t}\n\n\n\tupdateCSS() {\n\t\tvar cssValues = [];\n\n\t\tvar scrollPosition = this.scrollDetector.clampedRelativeScrollPosition();\n\n\t\tvar length = this.valueSets.length;\n\t\tfor(var i = 0; i < length; i++) {\n\t\t\tcssValues.push( this.valueSets[i].getCSSValue(scrollPosition) );\n\t\t}\n\n\t\tthis.setCSS(cssValues);\n\t\tthis.ticking = false;\n\t}\n\n\t/**\n\t * Throttle CSS updates to requestAnimationFrame.\n\t *\n\t * @return {void}\n\t */\n\trequestUpdate() {\n\t\tif(!this.ticking) {\n\t\t\trequestAnimationFrame(() => { this.updateCSS(); });\n\t\t}\n\n\t\tthis.ticking = true;\n\t}\n\n\t/**\n\t * Set animateTarget CSS to prepare for deactivation of the animation.\n\t *\n\t * @return {void}\n\t */\n\treset() {\n\t\tif(this.removePropertiesOnReset) {\n\t\t\tthis.animateTargets.forEach(animateTarget => {\n\t\t\t\tthis.properties.forEach(property => {\n\t\t\t\t\tanimateTarget.style.removeProperty(property)\n\t\t\t\t});\n\t\t\t});\n\t\t} else {\n\t\t\tvar cssValues = [];\n\n\t\t\tthis.valueSets.forEach(valueSet => {\n\t\t\t\tcssValues.push(\n\t\t\t\t\tvalueSet.valueFormat.replace(valueSet.substitutionString, valueSet.resetValue.toString() + valueSet.unit)\n\t\t\t\t);\n\t\t\t});\n\n\t\t\tthis.setCSS(cssValues);\n\t\t}\n\t}\n\n\t/**\n\t * Call this.init() if it's not activated already\n\t *\n\t * @return {void}\n\t */\n\tactivate() {\n\t\tif(!this.activated) {\n\t\t\tthis.init();\n\t\t\tthis.activated = true;\n\t\t}\n\t}\n\n\t/**\n\t * Disable the animation and restore default values.\n\t *\n\t * @return {void}\n\t */\n\tdeactivate() {\n\t\tif(this.activated) {\n\t\t\tthis.listeners.forEach(listener => {\n\t\t\t\twindow.removeEventListener('scroll', listener);\n\t\t\t});\n\t\t}\n\n\t\tthis.reset();\n\t\tthis.activated = false;\n\t}\n\n\t/**\n\t * Call activate() or deactivate() as needed, depending on the activeMediaQueryList.\n\t *\n\t * @return {[type]}\n\t */\n\trespond() {\n\t\tif(this.activeMediaQueryList.matches) {\n\t\t\tthis.activate();\n\t\t} else {\n\t\t\tthis.deactivate();\n\t\t}\n\t}\n}\n\n\n/**\n * Track the relative position of an element as it scrolls by.\n */\nclass ScrollDetector {\n\t/**\n\t * Constructor.\n\t *\n\t * @param {HTMLElement} scrollTarget\n\t *     Element whose position to track\n\t * @param {object} options\n\t *     Other options that may be omitted to use default values\n\t *         {bool} scrollIsVertical: Whether to track horizontal or vertical scrolling position.\n\t *\n\t * @todo Track vertical and horizontal position at the same time, and let animations use both simultaneously\n\t */\n\tconstructor(scrollTarget, options) {\n\t\tvar defaultOptions = {\n\t\t\tscrollIsVertical: true\n\t\t};\n\n\t\tthis.scrollTarget = scrollTarget;\n\n\t\toptions = Object.assign({}, defaultOptions, options);\n\n\t\tObject.getOwnPropertyNames(options).forEach(name => {\n\t\t\tthis[name] = options[name];\n\t\t});\n\t}\n\n\t/**\n\t * The relative position of the element, where 0 is the pixel\n\t * before it scrolls onto the screen, and 1 is the pixel after\n\t * it scrolls off the screen. All other values are interpolated\n\t * linearly.\n\t *\n\t * @return {float}\n\t */\n\trelativeScrollPosition() {\n\t\tvar offset, size, windowSize, scrollPos, scroll;\n\n\t\tvar rect = this.scrollTarget.getBoundingClientRect();\n\n\t\tif(this.scrollIsVertical) {\n\t\t\tscroll = this.getVerticalScroll();\n\t\t\toffset = rect.top + scroll;\n\t\t\tsize = rect.height;\n\t\t\twindowSize = window.innerHeight;\n\t\t\tscrollPos = window.pageYOffset;\n\t\t} else {\n\t\t\tscroll = this.getHorizontalScroll();\n\t\t\toffset = rect.left + scroll;\n\t\t\tsize = rect.width;\n\t\t\twindowSize = window.innerWidth;\n\t\t\tscrollPos = window.pageXOffset;\n\t\t}\n\n\t\tvar zeroPoint = offset - windowSize;\n\t\tvar completePoint = offset + size;\n\t\treturn (scrollPos - zeroPoint) / (completePoint - zeroPoint);\n\t}\n\n\n\t/**\n\t * Same as relativeScrollPosition, except all negative values are returned as zero\n\t * and all values greater than 1 are returned as 1.\n\t *\n\t * @param {float} relativeScrollPosition\n\t *     The relativeScrollPosition can be provided as a parameter to save on calculating\n\t *     it multiple times in the same function.\n\t *\n\t * @return {[type]}\n\t */\n\tclampedRelativeScrollPosition(relativeScrollPosition = this.relativeScrollPosition()) {\n\t\treturn Math.min(Math.max(relativeScrollPosition, 0), 1);\n\t}\n\n\t/**\n\t * Fallbacks upon fallbacks for window.scrollY\n\t *\n\t * @return {number}\n\t */\n\tgetVerticalScroll() {\n\t\tif('scrollY' in window) {\n\t\t\treturn window.scrollY;\n\t\t} else if ('pageYOffset' in window) {\n\t\t\treturn window.pageYOffset;\n\t\t} else if (document.documentElement.scrollTop > 0) {\n\t\t\treturn document.documentElement.scrollTop;\n\t\t} else {\n\t\t\treturn document.body.scrollTop;\n\t\t}\n\t}\n\n\t/**\n\t * Fallbacks upon fallbacks for window.scrollX\n\t *\n\t * @return {number}\n\t */\n\tgetHorizontalScroll() {\n\t\tif('scrollX' in window) {\n\t\t\treturn window.scrollX;\n\t\t} else if ('pageXOffset' in window) {\n\t\t\treturn window.pageXOffset;\n\t\t} else if (document.documentElement.scrollLeft > 0) {\n\t\t\treturn document.documentElement.scrollLeft;\n\t\t} else {\n\t\t\treturn document.body.scrollLeft;\n\t\t}\n\t}\n}\n\n/**\n * Default option container for ParallaxativeAnimation CSS values.\n */\nclass ParallaxativeAnimationValueSet {\n\t/**\n\t * Constructor. All it does is merge supplied options with defaults.\n\t *\n\t * @param {obj} options\n\t *     Parameters for constructing CSS values to be put in a single CSS rule.\n\t *         {str} valueFormat: String surrounding the CSS value, using a substitution string of your choice\n\t *         {str} substitutionString: As above\n\t *         {number} scrollPixelsPerParallaxPixel: How slowly the parallax effect should move.\n\t *             Higher numbers make it go more slowly. 0 would cause a divide-by-zero error and\n\t *             throws an exception.\n\t *         {number} resetValue: The value applied to the element when the animation is disabled\n\t *\n\t */\n\tconstructor(options) {\n\t\tvar defaultOptions = {\n\t\t\tvalueFormat: 'translateY(_)',\n\t\t\tsubstitutionString: '_',\n\t\t\tscrollPixelsPerParallaxPixel: 10,\n\t\t\tresetValue: 0\n\t\t};\n\n\t\toptions = Object.assign({}, defaultOptions, options);\n\n\t\tObject.getOwnPropertyNames(options).forEach(name => {\n\t\t\tthis[name] = options[name];\n\t\t});\n\n\t\tif(this.scrollPixelsPerParallaxPixel <= 0) {\n\t\t\tthrow 'scrollPixelsPerParallaxPixel must be greater than zero.';\n\t\t}\n\t}\n}\n\n/**\n * Class to create and manage animations of parallax background elements.\n */\nclass ParallaxativeAnimation extends ScrollAnimation {\n\t/**\n\t * Constructor.\n\t *\n\t * @param {array<HTMLElement>} animateTargets\n\t *     The elements to animate based on the scroll position of the ScrollDetector\n\t *\n\t * @param {ScrollDetector} scrollDetector\n\t *\n\t * @param {object} options\n\t *     Other options that may be omitted to use default values\n\t *         {array<string>} properties: The JavaScript CSS property names to modify\n\t *         {string} valueSetSeparator: String on which to join the different CSS values for this rule\n\t *         {bool} removePropertiesOnReset: Whether to unset the CSS properties altogether on deactivation,\n\t *             instead of setting them to the resetValue\n\t *         {MediaQueryList} activeMediaQueryList: The MediaQueryList controlling activation and deactivation of this object\n\t *         {bool} activateImmediately: Whether to turn on the animation immediately upon construction.\n\t *             (Even if true, the animation will not activate if activeMediaQueryList.matches is false.)\n\t *\n\t * @param {array<ScrollAnimationValueSet>} valueSets\n\t *     Configuration for one or more values to be used in the single CSS rule\n\t *     this object manages.\n\t */\n\tconstructor(animateTargets, scrollDetector, options, valueSets = [ new ParallaxativeAnimationValueSet ]) {\n\t\tsuper(animateTargets, scrollDetector, options, valueSets);\n\t}\n\n\t/**\n\t * Set up and turn on the animation.\n\t *\n\t * @return {void}\n\t */\n\tinit() {\n\t\tvar xDimensions = { size: 'width', Size: 'Width', offset: 'left' };\n\t\tvar yDimensions = { size: 'height', Size: 'Height', offset: 'top' }\n\t\tthis.dimensions =  this.scrollDetector.scrollIsVertical ? yDimensions : xDimensions;\n\n\t\tthis.updateResizeProperties();\n\n\t\tsuper.init();\n\n\t\tthis.updateResizeCSS();\n\n\t\tthis.animateTargets.forEach(animateTarget => {\n\t\t\tanimateTarget.classList.add('parallaxative-animated');\n\t\t});\n\n\t\tthis.scrollDetector.scrollTarget.classList.add('parallaxative-container')\n\t}\n\n\t/**\n\t * Recalculate CSS values based on the scroll position.\n\t *\n\t * @return {void}\n\t */\n\tupdateCSS() {\n\t\tvar scrollPosition = this.scrollDetector.clampedRelativeScrollPosition();\n\t\tvar cssValues = [];\n\n\t\tvar length = this.valueSets.length;\n\t\tfor(var i = 0; i < length; i++) {\n\t\t\tvar scrollTranslate = -((this.scrollTargetSize - this.valueSets[i].parallaxSize) * scrollPosition);\n\n\t\t\tcssValues.push(\n\t\t\t\tthis.valueSets[i].valueFormat.replace(this.valueSets[i].substitutionString, scrollTranslate.toString() + 'px')\n\t\t\t);\n\t\t}\n\n\t\tthis.setCSS(cssValues);\n\t\tthis.ticking = false;\n\t}\n\n\tupdateResizeProperties() {\n\t\tthis.scrollTargetRect = this.scrollDetector.scrollTarget.getBoundingClientRect();\n\t\tthis.scrollTargetSize = this.scrollTargetRect[this.dimensions.size];\n\t\tthis.scrollDistance = this.scrollTargetSize + window['inner' + this.dimensions.Size];\n\n\t\tvar length = this.valueSets.length;\n\t\tfor (var i = 0; i < length; i++) {\n\t\t\tthis.valueSets[i].parallaxSize = (this.scrollDistance - (this.scrollDistance / this.valueSets[i].scrollPixelsPerParallaxPixel) + this.scrollTargetSize);\n\t\t}\n\t}\n\n\tupdateResizeCSS() {\n\t\tthis.updateResizeProperties();\n\n\t\tvar valueSetsLength = this.valueSets.length;\n\t\tvar animateTargetsLength = this.animateTargets.length;\n\n\t\tfor (var i = 0; i < valueSetsLength; i++) {\n\t\t\tfor (var j = 0; j < animateTargetsLength; j++) {\n\t\t\t\tthis.animateTargets[j].style[this.dimensions.size] = this.valueSets[i].parallaxSize.toString() + 'px';\n\t\t\t}\n\t\t}\n\t}\n\n\trequestUpdate(event) {\n\t\tif(!this.ticking) {\n\t\t\trequestAnimationFrame(() => {\n\t\t\t\tthis.updateCSS();\n\n\t\t\t\tif(event.type === 'resize') {\n\t\t\t\t\tthis.updateResizeCSS();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tthis.ticking = true;\n\t}\n}"]}