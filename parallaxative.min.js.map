{"version":3,"sources":["parallaxative.js"],"names":["ScrollDetector","scrollTarget","options","_this","this","_classCallCheck","defaultOptions","scrollIsVertical","Object","assign","getOwnPropertyNames","forEach","name","offset","size","windowSize","scrollPos","scroll","rect","getBoundingClientRect","getVerticalScroll","top","height","window","innerHeight","pageYOffset","getHorizontalScroll","left","width","innerWidth","pageXOffset","zeroPoint","relativeScrollPosition","arguments","length","undefined","Math","min","max","scrollY","document","documentElement","scrollTop","body","scrollX","scrollLeft","ScrollAnimationValueSet","_this2","unit","valueFormat","substitutionString","startValue","endValue","resetValue","scrollPosition","replace","toString","ScrollAnimation","animateTargets","scrollDetector","_this3","valueSets","properties","valueSetSeparator","removePropertiesOnReset","activeMediaQueryList","matchMedia","activateImmediately","listeners","ticking","activated","respond","addListener","_this4","animateTarget","classList","add","updateCSS","push","e","requestUpdate","addEventListener","cssValues","i","j","animateProperty","style","join","clampedRelativeScrollPosition","getCSSValue","setCSS","_this5","requestAnimationFrame","_this6","property","removeProperty","valueSet","init","listener","removeEventListener","reset","matches","activate","deactivate","ParallaxativeAnimationValueSet","_this7","scrollPixelsPerParallaxPixel","ParallaxativeAnimation","_possibleConstructorReturn","__proto__","getPrototypeOf","call","xDimensions","Size","yDimensions","dimensions","updateResizeProperties","_get","prototype","updateResizeCSS","scrollTranslate","scrollTargetSize","parallaxSize","scrollTargetRect","scrollDistance","valueSetsLength","animateTargetsLength","event","_this9","type"],"mappings":"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","file":"parallaxative.min.js","sourcesContent":["/**\n * Track the relative position of an element as it scrolls by.\n */\nclass ScrollDetector {\n\t/**\n\t * Constructor.\n\t *\n\t * @param {HTMLElement} scrollTarget\n\t *     Element whose position to track\n\t * @param {object} options\n\t *     Other options that may be omitted to use default values\n\t *         {bool} scrollIsVertical: Whether to track horizontal or vertical scrolling position.\n\t *\n\t * @todo Track vertical and horizontal position at the same time, and let animations use both simultaneously\n\t */\n\tconstructor(scrollTarget, options) {\n\t\tvar defaultOptions = {\n\t\t\tscrollIsVertical: true\n\t\t};\n\n\t\tthis.scrollTarget = scrollTarget;\n\n\t\toptions = Object.assign({}, defaultOptions, options);\n\n\t\tObject.getOwnPropertyNames(options).forEach(name => {\n\t\t\tthis[name] = options[name];\n\t\t});\n\t}\n\n\t/**\n\t * The relative position of the element, where 0 is the pixel\n\t * before it scrolls onto the screen, and 1 is the pixel after\n\t * it scrolls off the screen. All other values are interpolated\n\t * linearly.\n\t *\n\t * @return {float}\n\t */\n\trelativeScrollPosition() {\n\t\tvar offset, size, windowSize, scrollPos, scroll;\n\n\t\tvar rect = this.scrollTarget.getBoundingClientRect();\n\n\t\tif(this.scrollIsVertical) {\n\t\t\tscroll = this.getVerticalScroll();\n\t\t\toffset = rect.top + scroll;\n\t\t\tsize = rect.height;\n\t\t\twindowSize = window.innerHeight;\n\t\t\tscrollPos = window.pageYOffset;\n\t\t} else {\n\t\t\tscroll = this.getHorizontalScroll();\n\t\t\toffset = rect.left + scroll;\n\t\t\tsize = rect.width;\n\t\t\twindowSize = window.innerWidth;\n\t\t\tscrollPos = window.pageXOffset;\n\t\t}\n\n\t\tvar zeroPoint = offset - windowSize;\n\t\tvar completePoint = offset + size;\n\t\treturn (scrollPos - zeroPoint) / (completePoint - zeroPoint);\n\t}\n\n\n\t/**\n\t * Same as relativeScrollPosition, except all negative values are returned as zero\n\t * and all values greater than 1 are returned as 1.\n\t *\n\t * @param {float} relativeScrollPosition\n\t *     The relativeScrollPosition can be provided as a parameter to save on calculating\n\t *     it multiple times in the same function.\n\t *\n\t * @return {[type]}\n\t */\n\tclampedRelativeScrollPosition(relativeScrollPosition = this.relativeScrollPosition()) {\n\t\treturn Math.min(Math.max(relativeScrollPosition, 0), 1);\n\t}\n\n\t/**\n\t * Fallbacks upon fallbacks for window.scrollY\n\t *\n\t * @return {number}\n\t */\n\tgetVerticalScroll() {\n\t\tif('scrollY' in window) {\n\t\t\treturn window.scrollY;\n\t\t} else if ('pageYOffset' in window) {\n\t\t\treturn window.pageYOffset;\n\t\t} else if (document.documentElement.scrollTop > 0) {\n\t\t\treturn document.documentElement.scrollTop;\n\t\t} else {\n\t\t\treturn document.body.scrollTop;\n\t\t}\n\t}\n\n\t/**\n\t * Fallbacks upon fallbacks for window.scrollX\n\t *\n\t * @return {number}\n\t */\n\tgetHorizontalScroll() {\n\t\tif('scrollX' in window) {\n\t\t\treturn window.scrollX;\n\t\t} else if ('pageXOffset' in window) {\n\t\t\treturn window.pageXOffset;\n\t\t} else if (document.documentElement.scrollLeft > 0) {\n\t\t\treturn document.documentElement.scrollLeft;\n\t\t} else {\n\t\t\treturn document.body.scrollLeft;\n\t\t}\n\t}\n}\n\n\n/**\n * Default option container for ScrollAnimation CSS values.\n * Making this a class might be overkill?\n */\nclass ScrollAnimationValueSet {\n\n\t/**\n\t * Constructor. All it does is merge supplied options with defaults.\n\t *\n\t * @param {obj} options\n\t *     Parameters for constructing CSS values to be put in a single CSS rule.\n\t *         {str} unit: CSS unit\n\t *         {str} valueFormat: String surrounding the CSS value, using a substitution string of your choice\n\t *         {str} substitutionString: As above\n\t *         {number} startValue: The value applied to the element the moment it is scrolled onto the screen\n\t *         {number} endValue: The value applied to the element the moment it is scrolled off the screen\n\t *         {number} resetValue: The value applied to the element when the animation is disabled\n\t *\n\t */\n\tconstructor(options) {\n\t\tvar defaultOptions = {\n\t\t\tunit: 'vh',\n\t\t\tvalueFormat: 'translateY(_)',\n\t\t\tsubstitutionString: '_',\n\t\t\tstartValue: 20,\n\t\t\tendValue: -20,\n\t\t\tresetValue: 0\n\t\t};\n\n\t\toptions = Object.assign({}, defaultOptions, options);\n\n\t\tObject.getOwnPropertyNames(options).forEach(name => {\n\t\t\tthis[name] = options[name];\n\t\t});\n\t}\n\n\tgetCSSValue(scrollPosition) {\n\t\treturn this.valueFormat.replace(this.substitutionString, ((this.endValue - this.startValue) * scrollPosition + this.startValue).toString() + this.unit)\n\t}\n}\n\n/**\n * Class to create and manage animations that are based on scrolling the window.\n */\nclass ScrollAnimation {\n\t/**\n\t * Constructor.\n\t *\n\t * @param {array<HTMLElement>} animateTargets\n\t *     The elements to animate based on the scroll position of the ScrollDetector\n\t *\n\t * @param {ScrollDetector} scrollDetector\n\t *\n\t * @param {object} options\n\t *     Other options that may be omitted to use default values\n\t *         {array<string>} properties: The JavaScript CSS property names to modify\n\t *         {string} valueSetSeparator: String on which to join the different CSS values for this rule\n\t *         {bool} removePropertiesOnReset: Whether to unset the CSS properties altogether on deactivation,\n\t *             instead of setting them to the resetValue\n\t *         {MediaQueryList} activeMediaQueryList: The MediaQueryList controlling activation and deactivation of this object\n\t *         {bool} activateImmediately: Whether to turn on the animation immediately upon construction.\n\t *             (Even if true, the animation will not activate if activeMediaQueryList.matches is false.)\n\t *\n\t * @param {array<ScrollAnimationValueSet>} valueSets\n\t *     Configuration for one or more values to be used in the single CSS rule\n\t *     this object manages.\n\t */\n\tconstructor(animateTargets, scrollDetector, options, valueSets = [ new ScrollAnimationValueSet() ]) {\n\t\tvar defaultOptions = {\n\t\t\tproperties: ['transform', 'msTransform'],\n\t\t\tvalueSetSeparator: ', ',\n\t\t\tremovePropertiesOnReset: true,\n\t\t\tactiveMediaQueryList: window.matchMedia('(min-width: 720px)'),\n\t\t\tactivateImmediately: true\n\t\t};\n\n\t\toptions = Object.assign({}, defaultOptions, options);\n\n\t\tObject.getOwnPropertyNames(options).forEach(name => {\n\t\t\tthis[name] = options[name];\n\t\t});\n\n\t\tthis.animateTargets = animateTargets;\n\t\tthis.scrollDetector = scrollDetector;\n\t\tthis.valueSets = valueSets;\n\t\tthis.listeners = [];\n\t\tthis.ticking = false;\n\t\tthis.activated = false;\n\n\t\tif(this.activateImmediately) {\n\t\t\tthis.respond();\n\t\t}\n\n\t\tthis.activeMediaQueryList.addListener(() => {\n\t\t\tthis.respond();\n\t\t});\n\t}\n\n\t/**\n\t * Set up and turn on the animation.\n\t *\n\t * @return {void}\n\t */\n\tinit() {\n\t\tthis.animateTargets.forEach(animateTarget => {\n\t\t\tanimateTarget.classList.add('scroll-animated');\n\t\t\tthis.updateCSS();\n\n\t\t\tthis.listeners.push((e) => {\n\t\t\t\tvar relativeScrollPosition = this.scrollDetector.relativeScrollPosition();\n\t\t\t\tif(relativeScrollPosition > -0.1 || relativeScrollPosition < 1.1) {\n\t\t\t\t\tthis.requestUpdate(e);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\twindow.addEventListener('scroll', this.listeners[this.listeners.length - 1]);\n\t\t\twindow.addEventListener('resize', this.listeners[this.listeners.length - 1]);\n\t\t});\n\t}\n\n\t/**\n\t * Actually modify the CSS of the animateTarget.\n\t *\n\t * @param {array<string>} cssValues - CSS strings to be joined by the valueSetSeparator\n\t */\n\tsetCSS(cssValues) {\n\t\tfor(var i = 0; i < this.animateTargets.length; i++) {\n\t\t\tvar animateTarget = this.animateTargets[i];\n\n\t\t\tfor(var j = 0; j < this.properties.length; j++) {\n\t\t\t\tvar animateProperty = this.properties[j];\n\t\t\t\tanimateTarget.style[animateProperty] = cssValues.join(this.valueSetSeparator);\n\t\t\t}\n\t\t}\n\t}\n\n\n\tupdateCSS() {\n\t\tvar cssValues = [];\n\n\t\tvar scrollPosition = this.scrollDetector.clampedRelativeScrollPosition();\n\n\t\tvar length = this.valueSets.length;\n\t\tfor(var i = 0; i < length; i++) {\n\t\t\tcssValues.push( this.valueSets[i].getCSSValue(scrollPosition) );\n\t\t}\n\n\t\tthis.setCSS(cssValues);\n\t\tthis.ticking = false;\n\t}\n\n\t/**\n\t * Throttle CSS updates to requestAnimationFrame.\n\t *\n\t * @return {void}\n\t */\n\trequestUpdate() {\n\t\tif(!this.ticking) {\n\t\t\trequestAnimationFrame(() => { this.updateCSS(); });\n\t\t}\n\n\t\tthis.ticking = true;\n\t}\n\n\t/**\n\t * Set animateTarget CSS to prepare for deactivation of the animation.\n\t *\n\t * @return {void}\n\t */\n\treset() {\n\t\tif(this.removePropertiesOnReset) {\n\t\t\tthis.animateTargets.forEach(animateTarget => {\n\t\t\t\tthis.properties.forEach(property => {\n\t\t\t\t\tanimateTarget.style.removeProperty(property)\n\t\t\t\t});\n\t\t\t});\n\t\t} else {\n\t\t\tvar cssValues = [];\n\n\t\t\tthis.valueSets.forEach(valueSet => {\n\t\t\t\tcssValues.push(\n\t\t\t\t\tvalueSet.valueFormat.replace(valueSet.substitutionString, valueSet.resetValue.toString() + valueSet.unit)\n\t\t\t\t);\n\t\t\t});\n\n\t\t\tthis.setCSS(cssValues);\n\t\t}\n\t}\n\n\t/**\n\t * Call this.init() if it's not activated already\n\t *\n\t * @return {void}\n\t */\n\tactivate() {\n\t\tif(!this.activated) {\n\t\t\tthis.init();\n\t\t\tthis.activated = true;\n\t\t}\n\t}\n\n\t/**\n\t * Disable the animation and restore default values.\n\t *\n\t * @return {void}\n\t */\n\tdeactivate() {\n\t\tif(this.activated) {\n\t\t\tthis.listeners.forEach(listener => {\n\t\t\t\twindow.removeEventListener('scroll', listener);\n\t\t\t\twindow.removeEventListener('resize', listener);\n\t\t\t});\n\t\t}\n\n\t\tthis.reset();\n\t\tthis.activated = false;\n\t}\n\n\t/**\n\t * Call activate() or deactivate() as needed, depending on the activeMediaQueryList.\n\t *\n\t * @return {[type]}\n\t */\n\trespond() {\n\t\tif(this.activeMediaQueryList.matches) {\n\t\t\tthis.activate();\n\t\t} else {\n\t\t\tthis.deactivate();\n\t\t}\n\t}\n}\n\n/**\n * Default option container for ParallaxativeAnimation CSS values.\n */\nclass ParallaxativeAnimationValueSet {\n\t/**\n\t * Constructor. All it does is merge supplied options with defaults.\n\t *\n\t * @param {obj} options\n\t *     Parameters for constructing CSS values to be put in a single CSS rule.\n\t *         {str} valueFormat: String surrounding the CSS value, using a substitution string of your choice\n\t *         {str} substitutionString: As above\n\t *         {number} scrollPixelsPerParallaxPixel: How slowly the parallax effect should move.\n\t *             Higher numbers make it go more slowly. 0 would cause a divide-by-zero error and\n\t *             throws an exception.\n\t *         {number} resetValue: The value applied to the element when the animation is disabled\n\t *\n\t */\n\tconstructor(options) {\n\t\tvar defaultOptions = {\n\t\t\tvalueFormat: 'translateY(_)',\n\t\t\tsubstitutionString: '_',\n\t\t\tscrollPixelsPerParallaxPixel: 10,\n\t\t\tresetValue: 0\n\t\t};\n\n\t\toptions = Object.assign({}, defaultOptions, options);\n\n\t\tObject.getOwnPropertyNames(options).forEach(name => {\n\t\t\tthis[name] = options[name];\n\t\t});\n\n\t\tif(this.scrollPixelsPerParallaxPixel <= 0) {\n\t\t\tthrow 'scrollPixelsPerParallaxPixel must be greater than zero.';\n\t\t}\n\t}\n}\n\n/**\n * Class to create and manage animations of parallax background elements.\n */\nclass ParallaxativeAnimation extends ScrollAnimation {\n\t/**\n\t * Constructor.\n\t *\n\t * @param {array<HTMLElement>} animateTargets\n\t *     The elements to animate based on the scroll position of the ScrollDetector\n\t *\n\t * @param {ScrollDetector} scrollDetector\n\t *\n\t * @param {object} options\n\t *     Other options that may be omitted to use default values\n\t *         {array<string>} properties: The JavaScript CSS property names to modify\n\t *         {string} valueSetSeparator: String on which to join the different CSS values for this rule\n\t *         {bool} removePropertiesOnReset: Whether to unset the CSS properties altogether on deactivation,\n\t *             instead of setting them to the resetValue\n\t *         {MediaQueryList} activeMediaQueryList: The MediaQueryList controlling activation and deactivation of this object\n\t *         {bool} activateImmediately: Whether to turn on the animation immediately upon construction.\n\t *             (Even if true, the animation will not activate if activeMediaQueryList.matches is false.)\n\t *\n\t * @param {array<ScrollAnimationValueSet>} valueSets\n\t *     Configuration for one or more values to be used in the single CSS rule\n\t *     this object manages.\n\t */\n\tconstructor(animateTargets, scrollDetector, options, valueSets = [ new ParallaxativeAnimationValueSet ]) {\n\t\tsuper(animateTargets, scrollDetector, options, valueSets);\n\t}\n\n\t/**\n\t * Set up and turn on the animation.\n\t *\n\t * @return {void}\n\t */\n\tinit() {\n\t\tvar xDimensions = { size: 'width', Size: 'Width', offset: 'left' };\n\t\tvar yDimensions = { size: 'height', Size: 'Height', offset: 'top' }\n\t\tthis.dimensions =  this.scrollDetector.scrollIsVertical ? yDimensions : xDimensions;\n\n\t\tthis.updateResizeProperties();\n\n\t\tsuper.init();\n\n\t\tthis.updateResizeCSS();\n\n\t\tthis.animateTargets.forEach(animateTarget => {\n\t\t\tanimateTarget.classList.add('parallaxative-animated');\n\t\t});\n\n\t\tthis.scrollDetector.scrollTarget.classList.add('parallaxative-container')\n\t}\n\n\t/**\n\t * Recalculate CSS values based on the scroll position.\n\t *\n\t * @return {void}\n\t */\n\tupdateCSS() {\n\t\tvar scrollPosition = this.scrollDetector.clampedRelativeScrollPosition();\n\t\tvar cssValues = [];\n\n\t\tvar length = this.valueSets.length;\n\t\tfor(var i = 0; i < length; i++) {\n\t\t\tvar scrollTranslate = -((this.scrollTargetSize - this.valueSets[i].parallaxSize) * scrollPosition);\n\n\t\t\tcssValues.push(\n\t\t\t\tthis.valueSets[i].valueFormat.replace(this.valueSets[i].substitutionString, scrollTranslate.toString() + 'px')\n\t\t\t);\n\t\t}\n\n\t\tthis.setCSS(cssValues);\n\t\tthis.ticking = false;\n\t}\n\n\tupdateResizeProperties() {\n\t\tthis.scrollTargetRect = this.scrollDetector.scrollTarget.getBoundingClientRect();\n\t\tthis.scrollTargetSize = this.scrollTargetRect[this.dimensions.size];\n\t\tthis.scrollDistance = this.scrollTargetSize + window['inner' + this.dimensions.Size];\n\n\t\tvar length = this.valueSets.length;\n\t\tfor (var i = 0; i < length; i++) {\n\t\t\tthis.valueSets[i].parallaxSize = (this.scrollDistance - (this.scrollDistance / this.valueSets[i].scrollPixelsPerParallaxPixel) + this.scrollTargetSize);\n\t\t}\n\t}\n\n\tupdateResizeCSS() {\n\t\tthis.updateResizeProperties();\n\n\t\tvar valueSetsLength = this.valueSets.length;\n\t\tvar animateTargetsLength = this.animateTargets.length;\n\n\t\tfor (var i = 0; i < valueSetsLength; i++) {\n\t\t\tfor (var j = 0; j < animateTargetsLength; j++) {\n\t\t\t\tthis.animateTargets[j].style[this.dimensions.size] = this.valueSets[i].parallaxSize.toString() + 'px';\n\t\t\t}\n\t\t}\n\t}\n\n\trequestUpdate(event) {\n\t\tif(!this.ticking) {\n\t\t\trequestAnimationFrame(() => {\n\t\t\t\tthis.updateCSS();\n\n\t\t\t\tif(event.type === 'resize') {\n\t\t\t\t\tthis.updateResizeCSS();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tthis.ticking = true;\n\t}\n}"]}