{"version":3,"sources":["parallaxative.js"],"names":["ScrollDetector","scrollTarget","options","_this","this","_classCallCheck","defaultOptions","scrollIsVertical","Object","assign","getOwnPropertyNames","forEach","name","updateResizeProperties","window","addEventListener","rect","getBoundingClientRect","documentOffsets","top","getVerticalScroll","left","getHorizontalScroll","windowSizes","width","innerWidth","height","innerHeight","offset","size","windowSize","scrollPos","zeroPoint","relativeScrollPosition","arguments","length","undefined","Math","min","max","scrollY","pageYOffset","document","documentElement","scrollTop","body","scrollX","pageXOffset","scrollLeft","ScrollAnimationValueSet","_this2","unit","valueFormat","substitutionString","startValue","endValue","resetValue","scrollPosition","replace","toString","ScrollAnimation","animateTargets","scrollDetector","_this3","valueSets","properties","valueSetSeparator","removePropertiesOnReset","activeMediaQueryList","matchMedia","activateImmediately","listeners","ticking","activated","respond","addListener","_this4","animateTarget","classList","add","updateCSS","push","e","requestUpdate","cssValues","i","j","animateProperty","style","join","clampedRelativeScrollPosition","getCSSValue","setCSS","_this5","requestAnimationFrame","_this6","property","removeProperty","valueSet","init","listener","removeEventListener","reset","matches","activate","deactivate","ParallaxAnimationValueSet","_this7","scrollPixelsPerParallaxPixel","ParallaxAnimation","_possibleConstructorReturn","__proto__","getPrototypeOf","call","xDimensions","Size","yDimensions","dimensions","_get","prototype","updateResizeCSS","scrollTranslate","scrollTargetSize","parallaxSize","scrollTargetRect","scrollDistance","abs","valueSetsLength","animateTargetsLength","event","_this9","type"],"mappings":"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","file":"parallaxative.min.js","sourcesContent":["/**\n * Track the relative position of an element as it scrolls by.\n */\nclass ScrollDetector {\n\t/**\n\t * Constructor.\n\t *\n\t * @param {HTMLElement} scrollTarget\n\t *     Element whose position to track\n\t * @param {object} options\n\t *     Other options that may be omitted to use default values\n\t *         {bool} scrollIsVertical: Whether to track horizontal or vertical scrolling position.\n\t *\n\t * @todo Track vertical and horizontal position at the same time, and let animations use both simultaneously\n\t */\n\tconstructor(scrollTarget, options) {\n\t\tvar defaultOptions = {\n\t\t\tscrollIsVertical: true\n\t\t};\n\n\t\tthis.scrollTarget = scrollTarget;\n\n\t\toptions = Object.assign({}, defaultOptions, options);\n\n\t\tObject.getOwnPropertyNames(options).forEach(name => {\n\t\t\tthis[name] = options[name];\n\t\t});\n\n\t\tthis.updateResizeProperties();\n\n\t\twindow.addEventListener('resize', () => {\n\t\t\tthis.updateResizeProperties();\n\t\t});\n\n\t\twindow.addEventListener('load', () => {\n\t\t\tthis.updateResizeProperties();\n\t\t});\n\t}\n\n\tupdateResizeProperties() {\n\t\tthis.rect = this.scrollTarget.getBoundingClientRect();\n\t\tthis.documentOffsets = {top: this.rect.top + this.getVerticalScroll(), left: this.rect.left + this.getHorizontalScroll() }\n\t\tthis.windowSizes = { width: window.innerWidth, height: window.innerHeight };\n\t}\n\n\t/**\n\t * The relative position of the element, where 0 is the pixel\n\t * before it scrolls onto the screen, and 1 is the pixel after\n\t * it scrolls off the screen. All other values are interpolated\n\t * linearly.\n\t *\n\t * @return {float}\n\t */\n\trelativeScrollPosition() {\n\t\tvar offset, size, windowSize, scrollPos;\n\n\t\tif(this.scrollIsVertical) {\n\t\t\tscrollPos = this.getVerticalScroll();\n\t\t\toffset = this.documentOffsets.top;\n\t\t\tsize = this.rect.height;\n\t\t\twindowSize = this.windowSizes.height;\n\n\t\t} else {\n\t\t\tscrollPos = this.getHorizontalScroll();\n\t\t\toffset = this.documentOffsets.left;\n\t\t\tsize = this.rect.width;\n\t\t\twindowSize = this.windowSizes.width;\n\t\t}\n\n\t\tvar zeroPoint = offset - windowSize;\n\t\tvar completePoint = offset + size;\n\t\treturn (scrollPos - zeroPoint) / (completePoint - zeroPoint);\n\t}\n\n\n\t/**\n\t * Same as relativeScrollPosition, except all negative values are returned as zero\n\t * and all values greater than 1 are returned as 1.\n\t *\n\t * @param {float} relativeScrollPosition\n\t *     The relativeScrollPosition can be provided as a parameter to save on calculating\n\t *     it multiple times in the same function.\n\t *\n\t * @return {[type]}\n\t */\n\tclampedRelativeScrollPosition(relativeScrollPosition = this.relativeScrollPosition()) {\n\t\treturn Math.min(Math.max(relativeScrollPosition, 0), 1);\n\t}\n\n\t/**\n\t * Fallbacks upon fallbacks for window.scrollY\n\t *\n\t * @return {number}\n\t */\n\tgetVerticalScroll() {\n\t\tif('scrollY' in window) {\n\t\t\treturn window.scrollY;\n\t\t} else if ('pageYOffset' in window) {\n\t\t\treturn window.pageYOffset;\n\t\t} else if (document.documentElement.scrollTop > 0) {\n\t\t\treturn document.documentElement.scrollTop;\n\t\t} else {\n\t\t\treturn document.body.scrollTop;\n\t\t}\n\t}\n\n\t/**\n\t * Fallbacks upon fallbacks for window.scrollX\n\t *\n\t * @return {number}\n\t */\n\tgetHorizontalScroll() {\n\t\tif('scrollX' in window) {\n\t\t\treturn window.scrollX;\n\t\t} else if ('pageXOffset' in window) {\n\t\t\treturn window.pageXOffset;\n\t\t} else if (document.documentElement.scrollLeft > 0) {\n\t\t\treturn document.documentElement.scrollLeft;\n\t\t} else {\n\t\t\treturn document.body.scrollLeft;\n\t\t}\n\t}\n}\n\n\n/**\n * Default option container for ScrollAnimation CSS values.\n * Making this a class might be overkill?\n */\nclass ScrollAnimationValueSet {\n\n\t/**\n\t * Constructor. All it does is merge supplied options with defaults.\n\t *\n\t * @param {obj} options\n\t *     Parameters for constructing CSS values to be put in a single CSS rule.\n\t *         {str} unit: CSS unit\n\t *         {str} valueFormat: String surrounding the CSS value, using a substitution string of your choice\n\t *         {str} substitutionString: As above\n\t *         {number} startValue: The value applied to the element the moment it is scrolled onto the screen\n\t *         {number} endValue: The value applied to the element the moment it is scrolled off the screen\n\t *         {number} resetValue: The value applied to the element when the animation is disabled\n\t *\n\t */\n\tconstructor(options) {\n\t\tvar defaultOptions = {\n\t\t\tunit: 'vh',\n\t\t\tvalueFormat: 'translate3d(0px, _, 1px)',\n\t\t\tsubstitutionString: '_',\n\t\t\tstartValue: 20,\n\t\t\tendValue: -20,\n\t\t\tresetValue: 0\n\t\t};\n\n\t\toptions = Object.assign({}, defaultOptions, options);\n\n\t\tObject.getOwnPropertyNames(options).forEach(name => {\n\t\t\tthis[name] = options[name];\n\t\t});\n\t}\n\n\tgetCSSValue(scrollPosition) {\n\t\treturn this.valueFormat.replace(this.substitutionString, ((this.endValue - this.startValue) * scrollPosition + this.startValue).toString() + this.unit)\n\t}\n}\n\n/**\n * Class to create and manage animations that are based on scrolling the window.\n */\nclass ScrollAnimation {\n\t/**\n\t * Constructor.\n\t *\n\t * @param {array<HTMLElement>} animateTargets\n\t *     The elements to animate based on the scroll position of the ScrollDetector\n\t *\n\t * @param {ScrollDetector} scrollDetector\n\t *\n\t * @param {object} options\n\t *     Other options that may be omitted to use default values\n\t *         {array<string>} properties: The JavaScript CSS property names to modify\n\t *         {string} valueSetSeparator: String on which to join the different CSS values for this rule\n\t *         {bool} removePropertiesOnReset: Whether to unset the CSS properties altogether on deactivation,\n\t *             instead of setting them to the resetValue\n\t *         {MediaQueryList} activeMediaQueryList: The MediaQueryList controlling activation and deactivation of this object\n\t *         {bool} activateImmediately: Whether to turn on the animation immediately upon construction.\n\t *             (Even if true, the animation will not activate if activeMediaQueryList.matches is false.)\n\t *\n\t * @param {array<ScrollAnimationValueSet>} valueSets\n\t *     Configuration for one or more values to be used in the single CSS rule\n\t *     this object manages.\n\t */\n\tconstructor(animateTargets, scrollDetector, options, valueSets = [ new ScrollAnimationValueSet() ]) {\n\t\tvar defaultOptions = {\n\t\t\tproperties: ['transform', 'msTransform'],\n\t\t\tvalueSetSeparator: ' ',\n\t\t\tremovePropertiesOnReset: true,\n\t\t\tactiveMediaQueryList: window.matchMedia('(min-width: 720px)'),\n\t\t\tactivateImmediately: true\n\t\t};\n\n\t\toptions = Object.assign({}, defaultOptions, options);\n\n\t\tObject.getOwnPropertyNames(options).forEach(name => {\n\t\t\tthis[name] = options[name];\n\t\t});\n\n\t\tthis.animateTargets = animateTargets;\n\t\tthis.scrollDetector = scrollDetector;\n\t\tthis.valueSets = valueSets;\n\t\tthis.listeners = [];\n\t\tthis.ticking = false;\n\t\tthis.activated = false;\n\n\t\tif(this.activateImmediately) {\n\t\t\tthis.respond();\n\t\t}\n\n\t\tthis.activeMediaQueryList.addListener(() => {\n\t\t\tthis.respond();\n\t\t});\n\t}\n\n\t/**\n\t * Set up and turn on the animation.\n\t *\n\t * @return {void}\n\t */\n\tinit() {\n\t\tthis.animateTargets.forEach(animateTarget => {\n\t\t\tanimateTarget.classList.add('scroll-animated');\n\t\t\tthis.updateCSS();\n\n\t\t\tthis.listeners.push((e) => {\n\t\t\t\tvar relativeScrollPosition = this.scrollDetector.relativeScrollPosition();\n\t\t\t\tif(relativeScrollPosition > -0.1 || relativeScrollPosition < 1.1) {\n\t\t\t\t\tthis.requestUpdate(e);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\twindow.addEventListener('scroll', this.listeners[this.listeners.length - 1]);\n\t\t\twindow.addEventListener('resize', this.listeners[this.listeners.length - 1]);\n\t\t});\n\t}\n\n\t/**\n\t * Actually modify the CSS of the animateTarget.\n\t *\n\t * @param {array<string>} cssValues - CSS strings to be joined by the valueSetSeparator\n\t */\n\tsetCSS(cssValues) {\n\t\tfor(var i = 0; i < this.animateTargets.length; i++) {\n\t\t\tvar animateTarget = this.animateTargets[i];\n\n\t\t\tfor(var j = 0; j < this.properties.length; j++) {\n\t\t\t\tvar animateProperty = this.properties[j];\n\t\t\t\tanimateTarget.style[animateProperty] = cssValues.join(this.valueSetSeparator);\n\t\t\t}\n\t\t}\n\t}\n\n\n\tupdateCSS() {\n\t\tvar cssValues = [];\n\n\t\tvar scrollPosition = this.scrollDetector.clampedRelativeScrollPosition();\n\n\t\tvar length = this.valueSets.length;\n\t\tfor(var i = 0; i < length; i++) {\n\t\t\tcssValues.push( this.valueSets[i].getCSSValue(scrollPosition) );\n\t\t}\n\n\t\tthis.setCSS(cssValues);\n\t\tthis.ticking = false;\n\t}\n\n\t/**\n\t * Throttle CSS updates to requestAnimationFrame.\n\t *\n\t * @return {void}\n\t */\n\trequestUpdate() {\n\t\tif(!this.ticking) {\n\t\t\trequestAnimationFrame(() => { this.updateCSS(); });\n\t\t}\n\n\t\tthis.ticking = true;\n\t}\n\n\t/**\n\t * Set animateTarget CSS to prepare for deactivation of the animation.\n\t *\n\t * @return {void}\n\t */\n\treset() {\n\t\tif(this.removePropertiesOnReset) {\n\t\t\tthis.animateTargets.forEach(animateTarget => {\n\t\t\t\tthis.properties.forEach(property => {\n\t\t\t\t\tanimateTarget.style.removeProperty(property)\n\t\t\t\t});\n\t\t\t});\n\t\t} else {\n\t\t\tvar cssValues = [];\n\n\t\t\tthis.valueSets.forEach(valueSet => {\n\t\t\t\tcssValues.push(\n\t\t\t\t\tvalueSet.valueFormat.replace(valueSet.substitutionString, valueSet.resetValue.toString() + valueSet.unit)\n\t\t\t\t);\n\t\t\t});\n\n\t\t\tthis.setCSS(cssValues);\n\t\t}\n\t}\n\n\t/**\n\t * Call this.init() if it's not activated already\n\t *\n\t * @return {void}\n\t */\n\tactivate() {\n\t\tif(!this.activated) {\n\t\t\tthis.init();\n\t\t\tthis.activated = true;\n\t\t}\n\t}\n\n\t/**\n\t * Disable the animation and restore default values.\n\t *\n\t * @return {void}\n\t */\n\tdeactivate() {\n\t\tif(this.activated) {\n\t\t\tthis.listeners.forEach(listener => {\n\t\t\t\twindow.removeEventListener('scroll', listener);\n\t\t\t\twindow.removeEventListener('resize', listener);\n\t\t\t});\n\t\t}\n\n\t\tthis.reset();\n\t\tthis.activated = false;\n\t}\n\n\t/**\n\t * Call activate() or deactivate() as needed, depending on the activeMediaQueryList.\n\t *\n\t * @return {[type]}\n\t */\n\trespond() {\n\t\tif(this.activeMediaQueryList.matches) {\n\t\t\tthis.activate();\n\t\t} else {\n\t\t\tthis.deactivate();\n\t\t}\n\t}\n}\n\n/**\n * Default option container for ParallaxAnimation CSS values.\n */\nclass ParallaxAnimationValueSet {\n\t/**\n\t * Constructor. All it does is merge supplied options with defaults.\n\t *\n\t * @param {obj} options\n\t *     Parameters for constructing CSS values to be put in a single CSS rule.\n\t *         {str} valueFormat: String surrounding the CSS value, using a substitution string of your choice\n\t *         {str} substitutionString: As above\n\t *         {number} scrollPixelsPerParallaxPixel: How slowly the parallax effect should move.\n\t *             Higher numbers make it go more slowly. 0 would cause a divide-by-zero error and\n\t *             throws an exception.\n\t *         {number} resetValue: The value applied to the element when the animation is disabled\n\t *\n\t */\n\tconstructor(options) {\n\t\tvar defaultOptions = {\n\t\t\tvalueFormat: 'translate3d(0px, _, 1px)',\n\t\t\tsubstitutionString: '_',\n\t\t\tscrollPixelsPerParallaxPixel: 10,\n\t\t\tresetValue: 0\n\t\t};\n\n\t\toptions = Object.assign({}, defaultOptions, options);\n\n\t\tObject.getOwnPropertyNames(options).forEach(name => {\n\t\t\tthis[name] = options[name];\n\t\t});\n\n\t\tif(this.scrollPixelsPerParallaxPixel === 0) {\n\t\t\tthrow 'scrollPixelsPerParallaxPixel must not be zero.';\n\t\t}\n\t}\n}\n\n/**\n * Class to create and manage animations of parallax background elements.\n */\nclass ParallaxAnimation extends ScrollAnimation {\n\t/**\n\t * Constructor.\n\t *\n\t * @param {array<HTMLElement>} animateTargets\n\t *     The elements to animate based on the scroll position of the ScrollDetector\n\t *\n\t * @param {ScrollDetector} scrollDetector\n\t *\n\t * @param {object} options\n\t *     Other options that may be omitted to use default values\n\t *         {array<string>} properties: The JavaScript CSS property names to modify\n\t *         {string} valueSetSeparator: String on which to join the different CSS values for this rule\n\t *         {bool} removePropertiesOnReset: Whether to unset the CSS properties altogether on deactivation,\n\t *             instead of setting them to the resetValue\n\t *         {MediaQueryList} activeMediaQueryList: The MediaQueryList controlling activation and deactivation of this object\n\t *         {bool} activateImmediately: Whether to turn on the animation immediately upon construction.\n\t *             (Even if true, the animation will not activate if activeMediaQueryList.matches is false.)\n\t *\n\t * @param {array<ScrollAnimationValueSet>} valueSets\n\t *     Configuration for one or more values to be used in the single CSS rule\n\t *     this object manages.\n\t */\n\tconstructor(animateTargets, scrollDetector, options, valueSets = [ new ParallaxAnimationValueSet ]) {\n\t\tsuper(animateTargets, scrollDetector, options, valueSets);\n\t}\n\n\t/**\n\t * Set up and turn on the animation.\n\t *\n\t * @return {void}\n\t */\n\tinit() {\n\t\tvar xDimensions = { size: 'width', Size: 'Width', offset: 'left' };\n\t\tvar yDimensions = { size: 'height', Size: 'Height', offset: 'top' }\n\t\tthis.dimensions =  this.scrollDetector.scrollIsVertical ? yDimensions : xDimensions;\n\n\t\tthis.updateResizeProperties();\n\n\t\tsuper.init();\n\n\t\tthis.updateResizeCSS();\n\n\t\tthis.animateTargets.forEach(animateTarget => {\n\t\t\tanimateTarget.classList.add('parallax-animated');\n\t\t});\n\n\t\tthis.scrollDetector.scrollTarget.classList.add('parallax-container')\n\t}\n\n\t/**\n\t * Recalculate CSS values based on the scroll position.\n\t *\n\t * @return {void}\n\t */\n\tupdateCSS() {\n\t\tvar scrollPosition = this.scrollDetector.clampedRelativeScrollPosition();\n\n\t\tvar cssValues = [];\n\n\t\tvar length = this.valueSets.length;\n\t\tfor(var i = 0; i < length; i++) {\n\t\t\tvar scrollTranslate;\n\n\t\t\tif(this.valueSets[i].scrollPixelsPerParallaxPixel < 0) {\n\t\t\t\tscrollTranslate = -((this.scrollTargetSize - this.valueSets[i].parallaxSize) * (1 - scrollPosition));\n\t\t\t} else {\n\t\t\t\tscrollTranslate = -((this.scrollTargetSize - this.valueSets[i].parallaxSize) * scrollPosition);\n\t\t\t}\n\n\t\t\tcssValues.push(\n\t\t\t\tthis.valueSets[i].valueFormat.replace(this.valueSets[i].substitutionString, scrollTranslate.toString() + 'px')\n\t\t\t);\n\t\t}\n\n\t\tthis.setCSS(cssValues);\n\t\tthis.ticking = false;\n\t}\n\n\tupdateResizeProperties() {\n\t\tthis.scrollTargetRect = this.scrollDetector.scrollTarget.getBoundingClientRect();\n\t\tthis.scrollTargetSize = this.scrollTargetRect[this.dimensions.size];\n\t\tthis.scrollDistance = this.scrollTargetSize + window['inner' + this.dimensions.Size];\n\n\t\tvar length = this.valueSets.length;\n\t\tfor (var i = 0; i < length; i++) {\n\t\t\tthis.valueSets[i].parallaxSize = Math.abs(this.scrollDistance / this.valueSets[i].scrollPixelsPerParallaxPixel) + this.scrollTargetSize;\n\t\t}\n\t}\n\n\tupdateResizeCSS() {\n\t\tthis.updateResizeProperties();\n\n\t\tvar valueSetsLength = this.valueSets.length;\n\t\tvar animateTargetsLength = this.animateTargets.length;\n\n\t\tfor (var i = 0; i < valueSetsLength; i++) {\n\t\t\tfor (var j = 0; j < animateTargetsLength; j++) {\n\t\t\t\tthis.animateTargets[j].style[this.dimensions.size] = this.valueSets[i].parallaxSize.toString() + 'px';\n\t\t\t}\n\t\t}\n\t}\n\n\trequestUpdate(event) {\n\t\tif(!this.ticking) {\n\t\t\trequestAnimationFrame(() => {\n\t\t\t\tthis.updateCSS();\n\n\t\t\t\tif(event.type === 'resize') {\n\t\t\t\t\tthis.updateResizeCSS();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tthis.ticking = true;\n\t}\n}\n\nexport { ScrollDetector, ScrollAnimation, ScrollAnimationValueSet, ParallaxAnimation, ParallaxAnimationValueSet };"]}