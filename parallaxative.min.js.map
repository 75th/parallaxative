{"version":3,"sources":["parallaxative.js"],"names":["ParallaxativeAnimationValueSet","options","_this","this","_classCallCheck","defaultOptions","valueFormat","substitutionString","scrollPixelsPerParallaxPixel","parallaxElementFocus","resetValue","Object","assign","getOwnPropertyNames","forEach","name","ParallaxativeAnimation","animateTargets","scrollDetector","valueSets","arguments","length","undefined","_possibleConstructorReturn","__proto__","getPrototypeOf","call","_get","prototype","animateTarget","classList","add","scrollTarget","_this3","cssValues","scrollPosition","clampedRelativeScrollPosition","scrollTargetRect","getBoundingClientRect","dimension","scrollIsVertical","capitalizedDimension","slice","toUpperCase","beginningOffsetDimension","endingOffsetDimension","scrollDistance","window","valueSet","zeroPointPercent","startPoint","endPoint","pos","parallaxDistance","Math","floor","push","replace","toString","targetDimensionSize","min","style","ticking","ScrollAnimation"],"mappings":"unCAAMA,+BACL,QAAAA,GAAYC,GAAS,GAAAC,GAAAC,IAAAC,iBAAAD,KAAAH,EACpB,IAAIK,IACHC,YAAa,gBACbC,mBAAoB,IACpBC,6BAA8B,GAC9BC,qBAAsB,MACtBC,WAAY,EASb,IANAT,EAAUU,OAAOC,UAAWP,EAAgBJ,GAE5CU,OAAOE,oBAAoBZ,GAASa,QAAQ,SAAAC,GAC3Cb,EAAKa,GAAQd,EAAQc,KAGnBZ,KAAKK,8BAAgC,EACvC,KAAM,2DAKHQ,mCACL,QAAAA,GAAYC,EAAgBC,EAAgBjB,GAA6D,GAApDkB,GAAoDC,UAAAC,OAAA,OAAAC,KAAAF,UAAA,GAAAA,UAAA,IAAtC,GAAIpB,gCAAkC,OAAAI,iBAAAD,KAAAa,GAAAO,2BAAApB,MAAAa,EAAAQ,WAAAb,OAAAc,eAAAT,IAAAU,KAAAvB,KAClGc,EAAgBC,EAAgBjB,EAASkB,yEAM/CQ,KAAAX,EAAAY,UAAAJ,WAAAb,OAAAc,eAAAT,EAAAY,WAAA,OAAAzB,MAAAuB,KAAAvB,MAEAA,KAAKc,eAAeH,QAAQ,SAAAe,GAC3BA,EAAcC,UAAUC,IAAI,4BAG7B5B,KAAKe,eAAec,aAAaF,UAAUC,IAAI,iEAGpC,GAAAE,GAAA9B,KACP+B,KACAC,EAAiBhC,KAAKe,eAAekB,gCAErCC,EAAmBlC,KAAKe,eAAec,aAAaM,wBAEpDC,EAAYpC,KAAKe,eAAesB,iBAAmB,SAAW,QAC9DC,EAAuBF,EAAUG,MAAM,EAAE,GAAGC,cAAgBJ,EAAUG,MAAM,GAC5EE,EAAyC,WAAdL,EAAyB,SAAW,QAC/DM,EAAsC,WAAdN,EAAyB,MAAQ,OAEzDO,EAAiBT,EAAiBE,GAAaQ,OAAO,QAAUN,EAEpEtC,MAAKgB,UAAUL,QAAQ,SAAAkC,GAEtB,GAAIC,GAAkBC,EAAYC,EAAUC,EAExCC,EAAmBP,EAAiBE,EAASxC,4BAEZ,YAAlCwC,EAASvC,sBACXwC,EAAmBZ,EAAiBE,GAAaO,EACjDI,GAAeG,EAAmBJ,EAClCE,EAAWD,EAAaG,EACxBD,EAAME,KAAKC,MAAOF,GAAoB,EAAIlB,GAAmBe,KAG7DD,EAAmBF,OAAO,QAAUN,GAAwBK,EAC5DI,EAAaG,EAAmBJ,EAChCE,EAAWD,EAAaG,EACxBD,EAAME,KAAKC,MAAOF,EAAmBlB,EAAkBgB,IAGxDjB,EAAUsB,KACTR,EAAS1C,YAAYmD,QAAQT,EAASzC,mBAAoB6C,EAAIM,WAAa,OAG5EzB,EAAKhB,eAAeH,QAAQ,SAAAe,GAC3B,GAAI8B,GAAsBL,KAAKM,IAC9B3B,EAAKf,eAAec,aAAa,SAAWS,GAA4C,EAAnBY,EACrEN,OAAO,QAAUN,GAA4C,EAAnBY,GACzCK,WAAa,IAEf7B,GAAcgC,MAAMtB,GAAaoB,EAEI,WAAlCX,EAASvC,sBACXoB,EAAcgC,MAAMhB,GAAyB,OAC7ChB,EAAcgC,MAAMjB,GAA4B,QAEhDf,EAAcgC,MAAMhB,GAAyB,MAC7ChB,EAAcgC,MAAMjB,GAA4B,YAKnDjB,KAAAX,EAAAY,UAAAJ,WAAAb,OAAAc,eAAAT,EAAAY,WAAA,SAAAzB,MAAAuB,KAAAvB,KAAa+B,GACb/B,KAAK2D,SAAU,SAxEoBC","file":"parallaxative.min.js","sourcesContent":["class ParallaxativeAnimationValueSet {\n\tconstructor(options) {\n\t\tvar defaultOptions = {\n\t\t\tvalueFormat: 'translateY(_)',\n\t\t\tsubstitutionString: '_',\n\t\t\tscrollPixelsPerParallaxPixel: 10,\n\t\t\tparallaxElementFocus: 'top',\n\t\t\tresetValue: 0\n\t\t};\n\n\t\toptions = Object.assign({}, defaultOptions, options);\n\n\t\tObject.getOwnPropertyNames(options).forEach(name => {\n\t\t\tthis[name] = options[name];\n\t\t});\n\n\t\tif(this.scrollPixelsPerParallaxPixel <= 0) {\n\t\t\tthrow 'scrollPixelsPerParallaxPixel must be greater than zero.';\n\t\t}\n\t}\n}\n\nclass ParallaxativeAnimation extends ScrollAnimation {\n\tconstructor(animateTargets, scrollDetector, options, valueSets = [ new ParallaxativeAnimationValueSet ]) {\n\t\tsuper(animateTargets, scrollDetector, options, valueSets);\n\n\t//\tthis.parallaxDistance = (this.scrollDetector.scrollTarget.getBoundingClientRect().)\n\t}\n\n\tinit() {\n\t\tsuper.init();\n\n\t\tthis.animateTargets.forEach(animateTarget => {\n\t\t\tanimateTarget.classList.add('parallaxative-animated');\n\t\t});\n\n\t\tthis.scrollDetector.scrollTarget.classList.add('parallaxative-container')\n\t}\n\n\tupdateCSS() {\n\t\tvar cssValues = [];\n\t\tvar scrollPosition = this.scrollDetector.clampedRelativeScrollPosition();\n\n\t\tvar scrollTargetRect = this.scrollDetector.scrollTarget.getBoundingClientRect();\n\n\t\tvar dimension = this.scrollDetector.scrollIsVertical ? 'height' : 'width';\n\t\tvar capitalizedDimension = dimension.slice(0,1).toUpperCase() + dimension.slice(1);\n\t\tvar beginningOffsetDimension = dimension === 'height' ? 'bottom' : 'right';\n\t\tvar endingOffsetDimension = dimension === 'height' ? 'top' : 'left';\n\n\t\tvar scrollDistance = scrollTargetRect[dimension] + window['inner' + capitalizedDimension];\n\n\t\tthis.valueSets.forEach(valueSet => {\n\n\t\t\tvar zeroPointPercent, startPoint, endPoint, pos;\n\n\t\t\tvar parallaxDistance = scrollDistance / valueSet.scrollPixelsPerParallaxPixel;\n\n\t\t\tif(valueSet.parallaxElementFocus === 'bottom') {\n\t\t\t\tzeroPointPercent = scrollTargetRect[dimension] / scrollDistance;\n\t\t\t\tstartPoint = -(parallaxDistance * zeroPointPercent);\n\t\t\t\tendPoint = startPoint + parallaxDistance;\n\t\t\t\tpos = Math.floor((parallaxDistance * (1 - scrollPosition)) + startPoint);\n\n\t\t\t} else {\n\t\t\t\tzeroPointPercent = window['inner' + capitalizedDimension] / scrollDistance;\n\t\t\t\tstartPoint = parallaxDistance * zeroPointPercent;\n\t\t\t\tendPoint = startPoint - parallaxDistance;\n\t\t\t\tpos = Math.floor((parallaxDistance * scrollPosition) + endPoint);\n\t\t\t}\n\n\t\t\tcssValues.push(\n\t\t\t\tvalueSet.valueFormat.replace(valueSet.substitutionString, pos.toString() + 'px')\n\t\t\t);\n\n\t\t\tthis.animateTargets.forEach(animateTarget => {\n\t\t\t\tvar targetDimensionSize = Math.min(\n\t\t\t\t\tthis.scrollDetector.scrollTarget['client' + capitalizedDimension] + (parallaxDistance * 2),\n\t\t\t\t\twindow['inner' + capitalizedDimension] + (parallaxDistance * 2)\n\t\t\t\t).toString() + 'px';\n\n\t\t\t\tanimateTarget.style[dimension] = targetDimensionSize;\n\n\t\t\t\tif(valueSet.parallaxElementFocus === 'bottom') {\n\t\t\t\t\tanimateTarget.style[endingOffsetDimension] = 'auto';\n\t\t\t\t\tanimateTarget.style[beginningOffsetDimension] = '0px';\n\t\t\t\t} else {\n\t\t\t\t\tanimateTarget.style[endingOffsetDimension] = '0px';\n\t\t\t\t\tanimateTarget.style[beginningOffsetDimension] = 'auto';\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\tsuper.setCSS(cssValues);\n\t\tthis.ticking = false;\n\t}\n}"]}